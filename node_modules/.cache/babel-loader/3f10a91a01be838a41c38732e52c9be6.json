{"ast":null,"code":"import hci from '../resources/CS464FinalReport.pdf';\nimport graphics from '../resources/anim1024.gif';\nimport carving from '../resources/carving.gif';\nimport brushonoff from '../resources/brushonoff.gif';\nimport brushsize from '../resources/brushsize.gif';\nimport rotate from '../resources/rotate.gif';\nimport game from '../resources/game.gif';\nimport trip_planner from '../resources/trip_planner.gif';\nimport poem1 from '../resources/poem1.png';\nimport poem2 from '../resources/poem2.png';\nimport congo from '../resources/congogameplay.gif';\nimport lyrics from '../resources/lyrics.gif';\nvar web = [{\n  'images': [congo],\n  'title': \"Congo Online\",\n  'description': \"A full stack web game based on the chess variant \\\"Congo\\\". \\\r\n              Features a complete user registration system using a MySQL\\\r\n              database to store users, invites, and game history. Java server \\\r\n              is responsible for validating moves and handling client \\\r\n              communication via websockets. Developed alongside a team of five \\\r\n              using Agile method.\",\n  'github': \"https://github.com/cs414-byte-mechanics/cs414-f19-001-ByteMechanics\"\n}, {\n  'images': [lyrics],\n  'title': \"Versed\",\n  'description': \"A serverless web game designed for music lovers and lyric buffs. \\\r\n              Users are able to search for songs available through the Genius API \\\r\n              and add them to a customizable playlist which can be \\\"shuffled\\\", \\\r\n              presenting the user with an unknown song from the list and asking  \\\r\n              them to guess common words to figure out the song they are playing.\",\n  'github': \"https://github.com/amrictor/lyric-quiz\",\n  'preview': \"https://lyrics.amrictor.com\"\n}, {\n  'images': [game],\n  'title': \"Wordsmyth\",\n  'description': \"Inspired by 1998 board game \\\"Wise or Otherwise\\\", a quote finishing web \\\r\n                game to play with a group. Users conduct turns simultaneously to guess at \\\r\n                and vote on real sayings from cultures around the world. Client-Server \\\r\n                communication using Java Websockets and a ReactJS front end.\",\n  'github': \"https://github.com/amrictor/portfolio/tree/master/server\"\n}, {\n  'images': [trip_planner],\n  'title': \"Trip Planner\",\n  'description': \"A webpage and corresponding server used for trip planning. \\\r\n                Makes filtered queries to a database of airports around \\\r\n                the world, allowing user to design, visualize, and save \\\r\n                a trip with customizable optimization. Developed with a \\\r\n                team as part of the Software Engineering course offered at CSU.\",\n  'github': \"https://github.com/amrictor/trip-planner\"\n}];\nweb.forEach(function (project) {\n  project.images = project.images.map(function (item) {\n    return {\n      'src': item,\n      'caption': \"\"\n    };\n  });\n});\nvar visual = [{\n  'images': [graphics],\n  'title': \"Ray Tracing Rendering Engine\",\n  'description': \"Recursive ray tracing engine written in C++ for producing images \\\r\n                of 3D space, in user defined lighting and camera conditions, \\\r\n                containing spheres and .OBJ models to which scalar, rotational, \\\r\n                or transpositional transformations can be applied.\",\n  'github': \"https://github.com/amrictor/ray-tracer\"\n}, {\n  'images': [carving, brushonoff, brushsize, rotate],\n  'title': \"Subtractive Art in Virtual Reality\",\n  'description': \"A program developed in Unity with C# to be used with an \\\r\n                Oculus Rift to carve in a voxel medium. Tested against \\\r\n                physical 3D art forms in a user study.\",\n  'github': \"https://github.com/csu-hci-projects/Subtractive_Art-v1.0\",\n  'paper': hci\n}];\nvisual.forEach(function (project) {\n  project.images = project.images.map(function (item) {\n    return {\n      'src': item,\n      'caption': \"\"\n    };\n  });\n});\nvar ai = [{\n  'images': [poem1, poem2],\n  'title': \"Linguistics and Text Prediction\",\n  'description': \"Multiple approaches to generating text, specifically poetry, \\\r\n        based on thousands of samples found online. A look at neural \\\r\n        networks, Markov chains, and pre- and post- processing to filter \\\r\n        out undesirable outputs.\",\n  'github': \"https://github.com/amrictor/MachineLearningFinal\",\n  'paper': \"https://nbviewer.jupyter.org/github/amrictor/MachineLearningFinal/blob/master/FinalProject/RictorProjectReport.ipynb\"\n}];\nai.forEach(function (project) {\n  project.images = project.images.map(function (item) {\n    return {\n      'src': item,\n      'caption': \"\"\n    };\n  });\n});\nvar nontech = [{\n  // 'images': [poem1, poem2],\n  'title': \"Untitled\",\n  'description': \"Poetry manuscript documenting the 2013 Arapahoe High School \\\r\n        shooting and aftermath. \" // 'github' : \"https://github.com/amrictor/MachineLearningFinal\",\n  // 'paper' : \"https://nbviewer.jupyter.org/github/amrictor/MachineLearningFinal/blob/master/FinalProject/RictorProjectReport.ipynb\"\n\n}]; // nontech.forEach((project)=>{\n//   project.images = project.images.map((item) =>  ({'src': item, 'caption': \"\"}))\n// });\n\nexport { web, visual, ai, nontech };","map":{"version":3,"sources":["F:\\Code\\portfolio\\portfolio\\client\\src\\resources\\projects.js"],"names":["hci","graphics","carving","brushonoff","brushsize","rotate","game","trip_planner","poem1","poem2","congo","lyrics","web","forEach","project","images","map","item","visual","ai","nontech"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,mCAAhB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAGA,IAAMC,GAAG,GAAG,CACJ;AACE,YAAU,CAACF,KAAD,CADZ;AAEE,WAAU,cAFZ;AAGE,iBACI;;;;;kCAJN;AAUE,YAAW;AAVb,CADI,EAaJ;AACE,YAAU,CAACC,MAAD,CADZ;AAEE,WAAU,QAFZ;AAGE,iBACI;;;;kFAJN;AASE,YAAW,wCATb;AAUE,aAAY;AAVd,CAbI,EAyBJ;AACI,YAAU,CAACL,IAAD,CADd;AAEI,WAAU,WAFd;AAGI,iBACI;;;6EAJR;AAQI,YAAW;AARf,CAzBI,EAmCF;AACE,YAAU,CAACC,YAAD,CADZ;AAEE,WAAU,cAFZ;AAGE,iBACI;;;;gFAJN;AASE,YAAW;AATb,CAnCE,CAAZ;AAiDAK,GAAG,CAACC,OAAJ,CAAY,UAACC,OAAD,EAAW;AACrBA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmB,UAACC,IAAD;AAAA,WAAY;AAAC,aAAOA,IAAR;AAAc,iBAAW;AAAzB,KAAZ;AAAA,GAAnB,CAAjB;AACD,CAFD;AAIA,IAAMC,MAAM,GAAG,CACL;AACE,YAAU,CAACjB,QAAD,CADZ;AAEE,WAAU,8BAFZ;AAGE,iBACI;;;mEAJN;AAQE,YAAW;AARb,CADK,EAWL;AACE,YAAU,CAACC,OAAD,EAAUC,UAAV,EAAsBC,SAAtB,EAAiCC,MAAjC,CADZ;AAEE,WAAU,oCAFZ;AAGE,iBACI;;uDAJN;AAOE,YAAW,0DAPb;AAQE,WAAUL;AARZ,CAXK,CAAf;AAwBEkB,MAAM,CAACL,OAAP,CAAe,UAACC,OAAD,EAAW;AACxBA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmB,UAACC,IAAD;AAAA,WAAY;AAAC,aAAOA,IAAR;AAAc,iBAAW;AAAzB,KAAZ;AAAA,GAAnB,CAAjB;AACD,CAFD;AAIF,IAAME,EAAE,GAAG,CACT;AACE,YAAU,CAACX,KAAD,EAAQC,KAAR,CADZ;AAEE,WAAU,iCAFZ;AAGE,iBACI;;;iCAJN;AAQE,YAAW,kDARb;AASE,WAAU;AATZ,CADS,CAAX;AAcAU,EAAE,CAACN,OAAH,CAAW,UAACC,OAAD,EAAW;AACpBA,EAAAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmB,UAACC,IAAD;AAAA,WAAY;AAAC,aAAOA,IAAR;AAAc,iBAAW;AAAzB,KAAZ;AAAA,GAAnB,CAAjB;AACD,CAFD;AAKA,IAAMG,OAAO,GAAG,CACd;AACE;AACA,WAAU,UAFZ;AAGE,iBACI;iCAJN,CAME;AACA;;AAPF,CADc,CAAhB,C,CAYA;AACA;AACA;;AAGA,SAASR,GAAT,EAAcM,MAAd,EAAsBC,EAAtB,EAA0BC,OAA1B","sourcesContent":["import hci from '../resources/CS464FinalReport.pdf'\r\nimport graphics from '../resources/anim1024.gif'\r\nimport carving from '../resources/carving.gif'\r\nimport brushonoff from '../resources/brushonoff.gif'\r\nimport brushsize from '../resources/brushsize.gif'\r\nimport rotate from '../resources/rotate.gif'\r\nimport game from '../resources/game.gif'\r\nimport trip_planner from '../resources/trip_planner.gif'\r\nimport poem1 from '../resources/poem1.png'\r\nimport poem2 from '../resources/poem2.png'\r\nimport congo from '../resources/congogameplay.gif'\r\nimport lyrics from '../resources/lyrics.gif'\r\n\r\n\r\nconst web = [     \r\n        {\r\n          'images': [congo],\r\n          'title' : \"Congo Online\",\r\n          'description' : \r\n              \"A full stack web game based on the chess variant \\\"Congo\\\". \\\r\n              Features a complete user registration system using a MySQL\\\r\n              database to store users, invites, and game history. Java server \\\r\n              is responsible for validating moves and handling client \\\r\n              communication via websockets. Developed alongside a team of five \\\r\n              using Agile method.\",\r\n          'github' : \"https://github.com/cs414-byte-mechanics/cs414-f19-001-ByteMechanics\",\r\n        },\r\n        {\r\n          'images': [lyrics],\r\n          'title' : \"Versed\",\r\n          'description' : \r\n              \"A serverless web game designed for music lovers and lyric buffs. \\\r\n              Users are able to search for songs available through the Genius API \\\r\n              and add them to a customizable playlist which can be \\\"shuffled\\\", \\\r\n              presenting the user with an unknown song from the list and asking  \\\r\n              them to guess common words to figure out the song they are playing.\",\r\n          'github' : \"https://github.com/amrictor/lyric-quiz\",\r\n          'preview' : \"https://lyrics.amrictor.com\"\r\n        },\r\n        {\r\n            'images': [game],\r\n            'title' : \"Wordsmyth\",\r\n            'description' : \r\n                \"Inspired by 1998 board game \\\"Wise or Otherwise\\\", a quote finishing web \\\r\n                game to play with a group. Users conduct turns simultaneously to guess at \\\r\n                and vote on real sayings from cultures around the world. Client-Server \\\r\n                communication using Java Websockets and a ReactJS front end.\",\r\n            'github' : \"https://github.com/amrictor/portfolio/tree/master/server\"\r\n          },\r\n          {\r\n            'images': [trip_planner],\r\n            'title' : \"Trip Planner\",\r\n            'description' : \r\n                \"A webpage and corresponding server used for trip planning. \\\r\n                Makes filtered queries to a database of airports around \\\r\n                the world, allowing user to design, visualize, and save \\\r\n                a trip with customizable optimization. Developed with a \\\r\n                team as part of the Software Engineering course offered at CSU.\",\r\n            'github' : \"https://github.com/amrictor/trip-planner\"\r\n          },\r\n\r\n        ]\r\n\r\nweb.forEach((project)=>{\r\n  project.images = project.images.map((item) =>  ({'src': item, 'caption': \"\"}))\r\n});\r\n\r\nconst visual = [\r\n          {\r\n            'images': [graphics],\r\n            'title' : \"Ray Tracing Rendering Engine\",\r\n            'description' : \r\n                \"Recursive ray tracing engine written in C++ for producing images \\\r\n                of 3D space, in user defined lighting and camera conditions, \\\r\n                containing spheres and .OBJ models to which scalar, rotational, \\\r\n                or transpositional transformations can be applied.\",\r\n            'github' : \"https://github.com/amrictor/ray-tracer\"\r\n          },\r\n          {\r\n            'images': [carving, brushonoff, brushsize, rotate],\r\n            'title' : \"Subtractive Art in Virtual Reality\",\r\n            'description' : \r\n                \"A program developed in Unity with C# to be used with an \\\r\n                Oculus Rift to carve in a voxel medium. Tested against \\\r\n                physical 3D art forms in a user study.\",\r\n            'github' : \"https://github.com/csu-hci-projects/Subtractive_Art-v1.0\",\r\n            'paper' : hci\r\n          },\r\n\r\n    ]\r\n\r\n  visual.forEach((project)=>{\r\n    project.images = project.images.map((item) =>  ({'src': item, 'caption': \"\"}))\r\n  });\r\n\r\nconst ai = [\r\n  {\r\n    'images': [poem1, poem2],\r\n    'title' : \"Linguistics and Text Prediction\",\r\n    'description' : \r\n        \"Multiple approaches to generating text, specifically poetry, \\\r\n        based on thousands of samples found online. A look at neural \\\r\n        networks, Markov chains, and pre- and post- processing to filter \\\r\n        out undesirable outputs.\",\r\n    'github' : \"https://github.com/amrictor/MachineLearningFinal\",\r\n    'paper' : \"https://nbviewer.jupyter.org/github/amrictor/MachineLearningFinal/blob/master/FinalProject/RictorProjectReport.ipynb\"\r\n},\r\n]\r\n\r\nai.forEach((project)=>{\r\n  project.images = project.images.map((item) =>  ({'src': item, 'caption': \"\"}))\r\n});\r\n\r\n\r\nconst nontech = [\r\n  {\r\n    // 'images': [poem1, poem2],\r\n    'title' : \"Untitled\",\r\n    'description' : \r\n        \"Poetry manuscript documenting the 2013 Arapahoe High School \\\r\n        shooting and aftermath. \",\r\n    // 'github' : \"https://github.com/amrictor/MachineLearningFinal\",\r\n    // 'paper' : \"https://nbviewer.jupyter.org/github/amrictor/MachineLearningFinal/blob/master/FinalProject/RictorProjectReport.ipynb\"\r\n},\r\n]\r\n\r\n// nontech.forEach((project)=>{\r\n//   project.images = project.images.map((item) =>  ({'src': item, 'caption': \"\"}))\r\n// });\r\n\r\n\r\nexport { web, visual, ai, nontech };"]},"metadata":{},"sourceType":"module"}